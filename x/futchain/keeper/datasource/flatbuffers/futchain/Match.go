// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package futchain

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Match struct {
	_tab flatbuffers.Table
}

func GetRootAsMatch(buf []byte, offset flatbuffers.UOffsetT) *Match {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Match{}
	x.Init(buf, n+offset)
	return x
}

func FinishMatchBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsMatch(buf []byte, offset flatbuffers.UOffsetT) *Match {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Match{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedMatchBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Match) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Match) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Match) Id() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Match) MutateId(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *Match) LeagueId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Match) MutateLeagueId(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *Match) Time() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Match) Home() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Match) MutateHome(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *Match) HomeScore() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Match) MutateHomeScore(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

func (rcv *Match) Away() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Match) MutateAway(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

func (rcv *Match) AwayScore() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Match) MutateAwayScore(n int32) bool {
	return rcv._tab.MutateInt32Slot(16, n)
}

func (rcv *Match) EliminatedTeamId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Match) MutateEliminatedTeamId(n int32) bool {
	return rcv._tab.MutateInt32Slot(18, n)
}

func (rcv *Match) StatusId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Match) MutateStatusId(n int32) bool {
	return rcv._tab.MutateInt32Slot(20, n)
}

func (rcv *Match) TournamentStage() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Match) Status(obj *Status) *Status {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Status)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Match) TimeTs() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Match) MutateTimeTs(n int64) bool {
	return rcv._tab.MutateInt64Slot(26, n)
}

func MatchStart(builder *flatbuffers.Builder) {
	builder.StartObject(12)
}
func MatchAddId(builder *flatbuffers.Builder, id int32) {
	builder.PrependInt32Slot(0, id, 0)
}
func MatchAddLeagueId(builder *flatbuffers.Builder, leagueId int32) {
	builder.PrependInt32Slot(1, leagueId, 0)
}
func MatchAddTime(builder *flatbuffers.Builder, time flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(time), 0)
}
func MatchAddHome(builder *flatbuffers.Builder, home int32) {
	builder.PrependInt32Slot(3, home, 0)
}
func MatchAddHomeScore(builder *flatbuffers.Builder, homeScore int32) {
	builder.PrependInt32Slot(4, homeScore, 0)
}
func MatchAddAway(builder *flatbuffers.Builder, away int32) {
	builder.PrependInt32Slot(5, away, 0)
}
func MatchAddAwayScore(builder *flatbuffers.Builder, awayScore int32) {
	builder.PrependInt32Slot(6, awayScore, 0)
}
func MatchAddEliminatedTeamId(builder *flatbuffers.Builder, eliminatedTeamId int32) {
	builder.PrependInt32Slot(7, eliminatedTeamId, 0)
}
func MatchAddStatusId(builder *flatbuffers.Builder, statusId int32) {
	builder.PrependInt32Slot(8, statusId, 0)
}
func MatchAddTournamentStage(builder *flatbuffers.Builder, tournamentStage flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(tournamentStage), 0)
}
func MatchAddStatus(builder *flatbuffers.Builder, status flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(status), 0)
}
func MatchAddTimeTs(builder *flatbuffers.Builder, timeTs int64) {
	builder.PrependInt64Slot(11, timeTs, 0)
}
func MatchEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
