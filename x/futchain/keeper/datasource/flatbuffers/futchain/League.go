// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package futchain

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type League struct {
	_tab flatbuffers.Table
}

func GetRootAsLeague(buf []byte, offset flatbuffers.UOffsetT) *League {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &League{}
	x.Init(buf, n+offset)
	return x
}

func FinishLeagueBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsLeague(buf []byte, offset flatbuffers.UOffsetT) *League {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &League{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedLeagueBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *League) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *League) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *League) IsGroup() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *League) MutateIsGroup(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

func (rcv *League) GroupName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *League) Ccode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *League) Id() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *League) MutateId(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *League) PrimaryId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *League) MutatePrimaryId(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

func (rcv *League) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *League) Matches(obj *Match, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *League) MatchesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func LeagueStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func LeagueAddIsGroup(builder *flatbuffers.Builder, isGroup bool) {
	builder.PrependBoolSlot(0, isGroup, false)
}
func LeagueAddGroupName(builder *flatbuffers.Builder, groupName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(groupName), 0)
}
func LeagueAddCcode(builder *flatbuffers.Builder, ccode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(ccode), 0)
}
func LeagueAddId(builder *flatbuffers.Builder, id int32) {
	builder.PrependInt32Slot(3, id, 0)
}
func LeagueAddPrimaryId(builder *flatbuffers.Builder, primaryId int32) {
	builder.PrependInt32Slot(4, primaryId, 0)
}
func LeagueAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(name), 0)
}
func LeagueAddMatches(builder *flatbuffers.Builder, matches flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(matches), 0)
}
func LeagueStartMatchesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func LeagueEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
