// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package futchain

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Status struct {
	_tab flatbuffers.Table
}

func GetRootAsStatus(buf []byte, offset flatbuffers.UOffsetT) *Status {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Status{}
	x.Init(buf, n+offset)
	return x
}

func FinishStatusBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsStatus(buf []byte, offset flatbuffers.UOffsetT) *Status {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Status{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedStatusBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Status) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Status) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Status) UtcTime() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Status) MutateUtcTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *Status) PeriodLength() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Status) MutatePeriodLength(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *Status) Started() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Status) MutateStarted(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

func (rcv *Status) Cancelled() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Status) MutateCancelled(n bool) bool {
	return rcv._tab.MutateBoolSlot(10, n)
}

func (rcv *Status) Finished() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Status) MutateFinished(n bool) bool {
	return rcv._tab.MutateBoolSlot(12, n)
}

func StatusStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func StatusAddUtcTime(builder *flatbuffers.Builder, utcTime int64) {
	builder.PrependInt64Slot(0, utcTime, 0)
}
func StatusAddPeriodLength(builder *flatbuffers.Builder, periodLength int32) {
	builder.PrependInt32Slot(1, periodLength, 0)
}
func StatusAddStarted(builder *flatbuffers.Builder, started bool) {
	builder.PrependBoolSlot(2, started, false)
}
func StatusAddCancelled(builder *flatbuffers.Builder, cancelled bool) {
	builder.PrependBoolSlot(3, cancelled, false)
}
func StatusAddFinished(builder *flatbuffers.Builder, finished bool) {
	builder.PrependBoolSlot(4, finished, false)
}
func StatusEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
