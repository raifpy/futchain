// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package futchain

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type LiveTime struct {
	_tab flatbuffers.Table
}

func GetRootAsLiveTime(buf []byte, offset flatbuffers.UOffsetT) *LiveTime {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LiveTime{}
	x.Init(buf, n+offset)
	return x
}

func FinishLiveTimeBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsLiveTime(buf []byte, offset flatbuffers.UOffsetT) *LiveTime {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &LiveTime{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedLiveTimeBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *LiveTime) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LiveTime) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *LiveTime) Long() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *LiveTime) MaxTime() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LiveTime) MutateMaxTime(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *LiveTime) AddedTime() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LiveTime) MutateAddedTime(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func LiveTimeStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func LiveTimeAddLong(builder *flatbuffers.Builder, long flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(long), 0)
}
func LiveTimeAddMaxTime(builder *flatbuffers.Builder, maxTime int32) {
	builder.PrependInt32Slot(1, maxTime, 0)
}
func LiveTimeAddAddedTime(builder *flatbuffers.Builder, addedTime int32) {
	builder.PrependInt32Slot(2, addedTime, 0)
}
func LiveTimeEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
